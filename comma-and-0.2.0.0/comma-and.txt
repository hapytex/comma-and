-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Join text together with commas, and "and".
--   
--   Join text together with commas, and "and".
@package comma-and
@version 0.2.0.0


-- | This module provides functions to join elements of <i>string-like</i>
--   types by adding a comma between the elements, and an "and" (optionally
--   with a comma) between the one-but-last and the last element.
module Text.Comma

-- | The two different ways to join the last two items together: with or
--   without a comma.
data CommaStyle

-- | The <i>Oxford comma</i> which uses a comma before the latest element,
--   also known as <i>Harvard comma</i> or <i>series comma</i>.
OxfordComma :: CommaStyle

-- | The comma style where there is no comma before the "and" of the last
--   item, informally known as the <i>Heathen comma</i>.
NoComma :: CommaStyle

-- | A small data type that contains the <i>string-like</i> values for the
--   'commaText, and the <a>commaAndText</a>: the join between the one but
--   last, and last element. This can be used to define a way to comma-and
--   in a different language.
data CommaValues s

-- | The (only) data constructor that takes values for the comma and the
--   "comma and" to join.
CommaValues :: s -> s -> CommaValues s

-- | The text used to join two elements together, if the second element is
--   <i>not</i> the last element in the series.
[commaText] :: CommaValues s -> s

-- | The text used to join the one but last and the last element together.
[commaAndText] :: CommaValues s -> s

-- | Convert the given <a>CommaStyle</a> to the corresponding
--   <tt>CommaValue</tt> item.
toCommaValues :: IsString s => CommaStyle -> CommaValues s

-- | Specify the string that determines how to join the last but one and
--   the last item based on the <a>CommaStyle</a>.
lastJoin :: IsString s => CommaStyle -> s

-- | Join the sequence of items with the given comma style, uses
--   <a>mempty</a> as empty string if there are no items.
commaAs :: (IsString s, Monoid s, Foldable f) => CommaStyle -> f s -> s

-- | Join the sequence of items with the given comma style, uses a given
--   "string" if there are no items.
commaEmptyAs :: (IsString s, Semigroup s, Foldable f) => s -> CommaStyle -> f s -> s

-- | Join the sequence of items with the given <a>CommaValues</a>, uses
--   <a>mempty</a> as empty string if there are no items.
commaWith :: (IsString s, Monoid s, Foldable f) => CommaValues s -> f s -> s

-- | Join the sequence of items with the given <a>CommaValues</a>, uses a
--   given "string" if there are no items.
commaEmptyWith :: (IsString s, Semigroup s, Foldable f) => s -> CommaValues s -> f s -> s

-- | Joins the sequence of items with the <i>Oxford comma</i> style, uses
--   <a>mempty</a> as empty string if there are no items.
comma :: (IsString s, Monoid s, Foldable f) => f s -> s

-- | Joins the sequence of items with the <i>no comma</i> style, uses
--   <a>mempty</a> as empty string if there are no items.
noComma :: (IsString s, Monoid s, Foldable f) => f s -> s

-- | Join the sequence of items with the <i>Oxford comma</i> style, uses a
--   given "string" if there are no items.
commaEmpty :: (IsString s, Semigroup s, Foldable f) => s -> f s -> s

-- | Join the sequence of items with the <i>no comma</i> style, uses a
--   given "string" if there are no items.
noCommaEmpty :: (IsString s, Semigroup s, Foldable f) => s -> f s -> s

-- | Join the <a>Foldable</a> of elements with a given item for a comma and
--   for the last join.
combineWith :: (Monoid s, Foldable f) => s -> s -> f s -> s

-- | Join the <a>Foldable</a> of elements with a given item for a comma and
--   for the last join with a custom value if the <a>Foldable</a> is empty.
combineWithEmpty :: (Semigroup s, Foldable f) => s -> s -> s -> f s -> s

-- | The <i>string-like</i> value for a comma, so <tt>", "</tt>.
comma_ :: IsString s => s

-- | The <i>string-like</i> value for an "and", so <tt>" and "</tt>.
and_ :: IsString s => s

-- | The <i>string-like</i> value for a comma and an "and", so <tt>", and
--   "</tt>.
commaAnd_ :: IsString s => s
instance GHC.Show.Show Text.Comma.CommaStyle
instance GHC.Read.Read Text.Comma.CommaStyle
instance GHC.Classes.Ord Text.Comma.CommaStyle
instance GHC.Classes.Eq Text.Comma.CommaStyle
instance GHC.Enum.Enum Text.Comma.CommaStyle
instance GHC.Enum.Bounded Text.Comma.CommaStyle
instance GHC.Show.Show s => GHC.Show.Show (Text.Comma.CommaValues s)
instance GHC.Read.Read s => GHC.Read.Read (Text.Comma.CommaValues s)
instance GHC.Classes.Ord s => GHC.Classes.Ord (Text.Comma.CommaValues s)
instance GHC.Classes.Eq s => GHC.Classes.Eq (Text.Comma.CommaValues s)
instance Data.Default.Class.Default Text.Comma.CommaStyle
instance Data.String.IsString s => Data.Default.Class.Default (Text.Comma.CommaValues s)
